from aiogram import types, Bot, Dispatcher
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from io import BytesIO
import logging
import uuid
import asyncio
import time
from keyboards.keyboards import get_active_config_keyboard, get_create_config_keyboard
from utils.bd import get_user_config, create_new_config, get_config_from_wireguard
from utils.qr import generate_config_qr
from core.settings import bot, logger
from utils.bd import get_user_config, create_new_config, get_config_from_wireguard, are_servers_available


# –ü—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async def direct_create_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    logger.info(f"–í—ã–∑–≤–∞–Ω direct_create_handler —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")
    
    # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–æ–ª–±—ç–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω middleware
    if getattr(callback_query, '_handled', False):
        logger.info("–ö–æ–ª–±—ç–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω middleware, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –∫–æ–ª–±—ç–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    callback_query._handled = True
    
    # –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –≤ –ø—Ä—è–º–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ")
    await bot.answer_callback_query(callback_query.id)
    
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    try:
        servers_available = await are_servers_available()
        
        if not servers_available:
            # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.edit_message_text(
                "‚ö†Ô∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</b>\n\n"
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. "
                "–°–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã.",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode=ParseMode.HTML
            )
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å API
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    await bot.edit_message_text(
        "üîÑ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        parse_mode=ParseMode.HTML
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_data = await create_new_config(user_id)
        
        if "error" in config_data:
            await bot.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n{config_data['error']}",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode=ParseMode.HTML
            )
            return
        
        config_text = config_data.get("config_text")
        
        if not config_text:
            await bot.edit_message_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_data = await get_user_config(user_id)
        
        expiry_text = ""
        if db_data:
            expiry_time = db_data.get("expiry_time")
            if expiry_time:
                expiry_dt = datetime.fromisoformat(expiry_time)
                expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
                expiry_text = f"‚ñ´Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ <b>{expiry_formatted}</b>\n"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_file = BytesIO(config_text.encode('utf-8'))
        config_file.name = f"vpn_duck_{user_id}.conf"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        qr_buffer = await generate_config_qr(config_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
        await bot.edit_message_text(
            f"‚úÖ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"{expiry_text}\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ—Ç. "
            f"–°–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
            f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ QR-–∫–æ–¥ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.HTML
        )
        
        if qr_buffer:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
            await bot.send_photo(
                user_id,
                qr_buffer,
                caption="üîë <b>QR-–∫–æ–¥ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard</b>\n\n"
                        "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                parse_mode=ParseMode.HTML
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await bot.send_document(
            user_id,
            config_file,
            caption="üìã <b>–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard</b>\n\n"
                    "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
            parse_mode=ParseMode.HTML
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions_text = (
            "üì± <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:</b>\n\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
            "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '+'\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥' –∏–ª–∏ '–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞'\n"
            "4Ô∏è‚É£ –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ—Ç. "
            "–°–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
            "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ VPN Duck ü¶Ü"
        )
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="start_extend")
        )
        
        await bot.send_message(
            user_id,
            instructions_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await bot.edit_message_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.HTML
        )

# –ü—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async def direct_cancel_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º–æ–π –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è."""
    logger.info(f"–í—ã–∑–≤–∞–Ω direct_cancel_handler —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")
    
    # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–æ–ª–±—ç–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω middleware
    if getattr(callback_query, '_handled', False):
        logger.info("–ö–æ–ª–±—ç–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω middleware, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –∫–æ–ª–±—ç–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    callback_query._handled = True
    
    await bot.answer_callback_query(callback_query.id)
    
    await bot.edit_message_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )

def register_direct_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä—è–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä—è–º—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.register_callback_query_handler(
        direct_create_handler,
        lambda c: c.data == 'direct_create',
        state='*'
    )
    dp.register_callback_query_handler(
        direct_cancel_handler,
        lambda c: c.data == 'direct_cancel',
        state='*'
    )

class CallbackMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é."""
    
    def __init__(self, bot: Bot, logger):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç middleware —Å –æ–±—ä–µ–∫—Ç–æ–º –±–æ—Ç–∞ –∏ –ª–æ–≥–≥–µ—Ä–æ–º."""
        self.bot = bot
        self.logger = logger
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∫–æ–ª–±—ç–∫–æ–≤
        self.processing_callbacks = {}
        super(CallbackMiddleware, self).__init__()
    
    async def on_pre_process_callback_query(self, callback_query: types.CallbackQuery, data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–µ–π."""
        callback_id = callback_query.id
        callback_data = callback_query.data
        user_id = callback_query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        tracking_key = f"{user_id}:{callback_data}:{callback_id}"
        
        if callback_data in ["direct_create", "direct_cancel"]:
            self.logger.info(f"Middleware: –∫–æ–ª–±—ç–∫ {callback_data} –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä—è–º—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
            # –ù–ï –ü–û–ú–ï–ß–ê–ï–ú –∫–∞–∫ handled, —á—Ç–æ–±—ã –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–≥ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            self._cleanup_tracking(callback_query)
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–ª–±—ç–∫
        if getattr(callback_query, '_handled', False) or data.get('_handled', False):
            self.logger.info(f"–ö–æ–ª–±—ç–∫ {callback_data} (ID: {callback_id}) —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π callback –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        if tracking_key in self.processing_callbacks:
            self.logger.info(f"–ö–æ–ª–±—ç–∫ {callback_data} (ID: {callback_id}) —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return True
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
        self.processing_callbacks[tracking_key] = datetime.now()
        callback_query._processing_key = tracking_key
        
        self.logger.info(f"Middleware: –ø–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫ {callback_data} (ID: {callback_id}, Key: {tracking_key})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –∫–æ–ª–±—ç–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä—è–º—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        if callback_data in ["direct_create", "direct_cancel"]:
            self.logger.info(f"Middleware: –∫–æ–ª–±—ç–∫ {callback_data} –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä—è–º—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
            self._cleanup_tracking(callback_query)
            return None


        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–ª–±—ç–∫–æ–≤
        try:
            # direct_create - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if callback_data == "direct_create":
                result = await self._handle_direct_create(callback_query)
                if result:
                    self._mark_as_handled(callback_query, data)
                    return True
                    
            # direct_cancel - –æ—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏    
            elif callback_data == "direct_cancel":
                result = await self._handle_direct_cancel(callback_query)
                if result:
                    self._mark_as_handled(callback_query, data)
                    return True
                    
            # get_config - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            elif callback_data == "get_config":
                result = await self._handle_get_config(callback_query)
                if result:
                    self._mark_as_handled(callback_query, data)
                    return True
                    
            # status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            elif callback_data == "status":
                result = await self._handle_status(callback_query)
                if result:
                    self._mark_as_handled(callback_query, data)
                    return True
                    
            # # start_extend - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            # elif callback_data == "start_extend":
            #     # –≠—Ç–æ—Ç –∫–æ–ª–±—ç–∫ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ middleware, –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
            #     self.logger.info("Middleware: –ø–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫ start_extend, –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
            #     self._cleanup_tracking(callback_query)
            #     return None
        
        except Exception as e:
            self.logger.error(f"Middleware: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞ {callback_data}: {str(e)}", exc_info=True)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
            try:
                await self.bot.send_message(
                    user_id,
                    "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É.",
                    parse_mode=ParseMode.HTML
                )
            except:
                pass
            
            # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–±—ç–∫–µ
            self._cleanup_tracking(callback_query)
            self._mark_as_handled(callback_query, data)
            return True
        
        # –ï—Å–ª–∏ –∫–æ–ª–±—ç–∫ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω middleware, –æ—á–∏—â–∞–µ–º tracking
        self._cleanup_tracking(callback_query)
        return None  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    
    def _mark_as_handled(self, callback_query, data):
        """–ü–æ–º–µ—á–∞–µ—Ç –∫–æ–ª–±—ç–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π."""
        callback_query._handled = True
        data['_handled'] = True
        self._cleanup_tracking(callback_query)
        
    def _cleanup_tracking(self, callback_query):
        """–û—á–∏—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–º –∫–æ–ª–±—ç–∫–µ."""
        tracking_key = getattr(callback_query, '_processing_key', None)
        if tracking_key and tracking_key in self.processing_callbacks:
            del self.processing_callbacks[tracking_key]
    
    def get_active_config_keyboard(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return get_active_config_keyboard()
    
    def get_create_config_keyboard(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return get_create_config_keyboard()
    
    async def _handle_status(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π)."""
        self.logger.info("Middleware: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ status")

        await self.bot.answer_callback_query(callback_query.id)
        user_id = callback_query.from_user.id

        try:
            get_config_task = asyncio.create_task(get_user_config(user_id))
            try:
                config = await asyncio.wait_for(get_config_task, timeout=10)
            except asyncio.TimeoutError:
                await self.bot.send_message(
                    user_id,
                    "‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
                return True

            if config and config.get("active", False):
                try:
                    created_at = datetime.fromisoformat(config.get("created_at")).strftime("%d.%m.%Y %H:%M:%S")
                except (ValueError, TypeError):
                    created_at = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                try:
                    expiry_time = datetime.fromisoformat(config.get("expiry_time"))
                    expiry_formatted = expiry_time.strftime("%d.%m.%Y %H:%M:%S")

                    now = datetime.now()
                    remaining_time = expiry_time - now
                    remaining_days = max(0, remaining_time.days)
                    remaining_hours = max(0, remaining_time.seconds // 3600)
                except (ValueError, TypeError):
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã: {config.get('expiry_time')}")
                    expiry_formatted = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    remaining_days = 0
                    remaining_hours = 0

                geolocation_name = config.get("geolocation_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

                status_text = (
                    f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard</b>\n\n"
                    f"‚ñ´Ô∏è –ê–∫—Ç–∏–≤–Ω–∞: <b>–î–∞</b>\n"
                    f"‚ñ´Ô∏è –°–æ–∑–¥–∞–Ω–∞: <b>{created_at}</b>\n"
                    f"‚ñ´Ô∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{expiry_formatted}</b>\n"
                    f"‚ñ´Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: <b>{remaining_days} –¥–Ω. {remaining_hours} —á.</b>\n"
                    f"‚ñ´Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{geolocation_name}</b>\n\n"
                    f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ—Ç. "
                    f"–°–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
                )

                keyboard = self.get_active_config_keyboard()

                await self.bot.send_message(
                    user_id,
                    status_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard
                )
            else:
                keyboard = self.get_create_config_keyboard()

                await self.bot.send_message(
                    user_id,
                    "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard
                )

            return True

        except Exception as e:
            self.logger.error(f"Middleware: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            await self.bot.send_message(
                user_id,
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML
            )
            return True
            
    async def _handle_direct_create(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.logger.info("Middleware: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ direct_create")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –æ–∂–∏–¥–∞–Ω–∏—è
        await self.bot.answer_callback_query(callback_query.id)
        user_id = callback_query.from_user.id
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        await self.bot.edit_message_text(
            "üîÑ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.HTML
        )
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            create_task = asyncio.create_task(create_new_config(user_id))
            try:
                config_data = await asyncio.wait_for(create_task, timeout=30)
            except asyncio.TimeoutError:
                await self.bot.edit_message_text(
                    "‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è</b>\n\n"
                    "–°–µ—Ä–≤–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    parse_mode=ParseMode.HTML
                )
                return True
            
            if "error" in config_data:
                await self.bot.edit_message_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n{config_data['error']}",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    parse_mode=ParseMode.HTML
                )
                return True
            
            config_text = config_data.get("config_text")
            
            if not config_text:
                await self.bot.edit_message_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    parse_mode=ParseMode.HTML
                )
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            get_config_task = asyncio.create_task(get_user_config(user_id))
            try:
                db_data = await asyncio.wait_for(get_config_task, timeout=10)
            except asyncio.TimeoutError:
                db_data = None
                self.logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            expiry_text = ""
            if db_data:
                expiry_time = db_data.get("expiry_time")
                if expiry_time:
                    try:
                        expiry_dt = datetime.fromisoformat(expiry_time)
                        expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
                        expiry_text = f"‚ñ´Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ <b>{expiry_formatted}</b>\n"
                    except ValueError:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã: {expiry_time}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_file = BytesIO(config_text.encode('utf-8'))
            config_file.name = f"vpn_duck_{user_id}.conf"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            qr_task = asyncio.create_task(generate_config_qr(config_text))
            try:
                qr_buffer = await asyncio.wait_for(qr_task, timeout=10)
            except asyncio.TimeoutError:
                qr_buffer = None
                self.logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
            await self.bot.edit_message_text(
                f"‚úÖ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"{expiry_text}\n"
                f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ—Ç. "
                f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –Ω–∞—à–µ–π —Å–µ—Ç–∏. "
                f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!\n\n"
                f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ QR-–∫–æ–¥ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode=ParseMode.HTML
            )
            
            if qr_buffer:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
                await self.bot.send_photo(
                    user_id,
                    qr_buffer,
                    caption="üîë <b>QR-–∫–æ–¥ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard</b>\n\n"
                            "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    parse_mode=ParseMode.HTML
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self.bot.send_document(
                user_id,
                config_file,
                caption="üìã <b>–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard</b>\n\n"
                        "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            instructions_text = (
                "üì± <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:</b>\n\n"
                "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
                "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '+'\n"
                "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥' –∏–ª–∏ '–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞'\n"
                "4Ô∏è‚É£ –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
                "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ—Ç. "
                "–°–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
                "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ VPN Duck ü¶Ü"
            )
            
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="start_extend")
            )
            
            await self.bot.send_message(
                user_id,
                instructions_text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
            
            return True
                
        except Exception as e:
            self.logger.error(f"Middleware: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            await self.bot.edit_message_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode=ParseMode.HTML
            )
            
            return True
                    
        except Exception as e:
            self.logger.error(f"Middleware: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            await self.bot.edit_message_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode=ParseMode.HTML
            )
            
            return True
    
    async def _handle_direct_cancel(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.logger.info("Middleware: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ direct_cancel")
        
        await self.bot.answer_callback_query(callback_query.id)
        
        await self.bot.edit_message_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )
        
        return True
    
    async def _handle_get_config(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.logger.info("Middleware: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ get_config")
        
        await self.bot.answer_callback_query(callback_query.id)
        user_id = callback_query.from_user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
                servers_available = await are_servers_available()
                if not servers_available:
                    await self.bot.send_message(
                        user_id,
                        "‚ö†Ô∏è <b>–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</b>\n\n"
                        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. "
                        "–°–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã.",
                        parse_mode=ParseMode.HTML
                    )
                    return True
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤: {str(e)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä—ã –µ—Å—Ç—å
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            get_config_task = asyncio.create_task(get_config_from_wireguard(user_id))
            try:
                config_data = await asyncio.wait_for(get_config_task, timeout=15)
            except asyncio.TimeoutError:
                await self.bot.send_message(
                    user_id,
                    "‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
                return True
            
            if "error" in config_data:
                await self.bot.send_message(
                    user_id,
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n{config_data['error']}",
                    parse_mode=ParseMode.HTML
                )
                return True
            
            config_text = config_data.get("config_text")
            
            if not config_text:
                await self.bot.send_message(
                    user_id,
                    "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                    "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.",
                    parse_mode=ParseMode.HTML
                )
                return True
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_file = BytesIO(config_text.encode('utf-8'))
            config_file.name = f"vpn_duck_{user_id}.conf"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            qr_task = asyncio.create_task(generate_config_qr(config_text))
            try:
                qr_buffer = await asyncio.wait_for(qr_task, timeout=10)
            except asyncio.TimeoutError:
                qr_buffer = None
                self.logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if qr_buffer:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
                await self.bot.send_photo(
                    user_id,
                    qr_buffer,
                    caption="üîë <b>QR-–∫–æ–¥ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard</b>\n\n"
                            "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    parse_mode=ParseMode.HTML
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self.bot.send_document(
                user_id,
                config_file,
                caption="üìã <b>–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard</b>\n\n"
                        "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            instructions_text = (
                "üì± <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:</b>\n\n"
                "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
                "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '+'\n"
                "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥' –∏–ª–∏ '–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞'\n"
                "4Ô∏è‚É£ –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
                "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ—Ç. "
                "–°–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
                "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ VPN Duck ü¶Ü"
            )
            
            await self.bot.send_message(
                user_id,
                instructions_text,
                parse_mode=ParseMode.HTML
            )
            
            return True
            
        except Exception as e:
            self.logger.error(f"Middleware: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            await self.bot.send_message(
                user_id,
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML
            )
            
            return True