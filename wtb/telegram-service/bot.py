import os
import logging
import requests
import json
import uuid
from datetime import datetime, timedelta
import asyncio
import qrcode
from io import BytesIO

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, LabeledPrice, Invoice
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot token from environment variable
API_TOKEN = os.getenv('TELEGRAM_TOKEN')
WIREGUARD_SERVICE_URL = os.getenv('WIREGUARD_SERVICE_URL')
DATABASE_SERVICE_URL = os.getenv('DATABASE_SERVICE_URL')

# Initialize bot and dispatcher with FSM storage
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
class ExtendConfigStates(StatesGroup):
    selecting_duration = State()
    confirming_payment = State()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
EXTEND_OPTIONS = [
    {"days": 7, "stars": 500, "label": "7 –¥–Ω–µ–π - 500 ‚≠ê"},
    {"days": 30, "stars": 1800, "label": "30 –¥–Ω–µ–π - 1800 ‚≠ê"},
    {"days": 90, "stars": 5000, "label": "90 –¥–Ω–µ–π - 5000 ‚≠ê"},
    {"days": 365, "stars": 18000, "label": "365 –¥–Ω–µ–π - 18000 ‚≠ê"}
]

# Existing functions like get_permanent_keyboard(), send_welcome(), etc. remain the same...

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Telegram Stars
async def get_stars_balance(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Telegram Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Stars API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        result = await bot.get_stars_balance(user_id)
        return result.stars_amount
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥: {str(e)}")
        return 0  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
async def create_stars_invoice(user_id, days, stars):
    """–°–æ–∑–¥–∞–Ω–∏–µ invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏."""
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
    payment_id = str(uuid.uuid4())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    title = f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ WireGuard –Ω–∞ {days} –¥–Ω–µ–π"
    description = f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN —á–µ—Ä–µ–∑ WireGuard –Ω–∞ {days} –¥–Ω–µ–π"
    
    # –°–æ–∑–¥–∞–µ–º invoice —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Stars
    prices = [LabeledPrice(label=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ {days} –¥–Ω–µ–π", amount=stars)]
    
    try:
        # –°–æ–∑–¥–∞–µ–º invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
        invoice = await bot.create_invoice(
            title=title,
            description=description,
            payload=f"extend_{user_id}_{days}_{stars}_{payment_id}",
            provider_token="stars",  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Stars
            currency="STARS",  # –í–∞–ª—é—Ç–∞ - –∑–≤–µ–∑–¥—ã
            prices=prices,
            max_tip_amount=0,
            suggested_tip_amounts=[],
            start_parameter=payment_id,
            provider_data=None
        )
        
        return payment_id, title, description, invoice
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ invoice: {str(e)}")
        raise e

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
@dp.pre_checkout_query_handler(lambda query: True, state=ExtendConfigStates.confirming_payment)
async def process_pre_checkout(pre_checkout_query: types.PreCheckoutQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–≤–µ–∑–¥–∞–º–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
        payload = pre_checkout_query.invoice_payload
        _, user_id, days, stars, payment_id = payload.split('_')
        user_id = int(user_id)
        days = int(days)
        stars = int(stars)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–≤–µ–∑–¥
        user_balance = await get_stars_balance(user_id)
        
        if user_balance < stars:
            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥, –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            await bot.answer_pre_checkout_query(
                pre_checkout_query.id,
                ok=False,
                error_message="–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å."
            )
            return
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–ª–∞—Ç–µ–∂
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=True
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            payment_id=payment_id,
            days=days,
            stars=stars
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ pre-checkout: {str(e)}")
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏
@dp.message_handler(content_types=types.ContentTypes.SUCCESSFUL_PAYMENT, state=ExtendConfigStates.confirming_payment)
async def process_successful_payment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    payment_id = data.get('payment_id')
    days = data.get('days')
    stars = data.get('stars')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    payment_info = message.successful_payment
    transaction_id = payment_info.telegram_payment_charge_id
    
    # –ü–æ–ª—É—á–∞–µ–º user_id
    user_id = message.from_user.id
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        response = requests.post(
            f"{DATABASE_SERVICE_URL}/config/extend",
            json={
                "user_id": user_id,
                "days": days,
                "stars_amount": stars,
                "transaction_id": transaction_id
            }
        )
        
        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_response = requests.get(f"{DATABASE_SERVICE_URL}/config/{user_id}")
            
            if config_response.status_code == 200:
                config_data = config_response.json()
                expiry_time = config_data.get("expiry_time")
                expiry_dt = datetime.fromisoformat(expiry_time)
                expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(
                    InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status")
                )
                
                await message.reply(
                    f"‚úÖ *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!*\n\n"
                    f"‚ñ´Ô∏è –ü—Ä–æ–¥–ª–µ–Ω–∏–µ: *{days} –¥–Ω–µ–π*\n"
                    f"‚ñ´Ô∏è –û–ø–ª–∞—á–µ–Ω–æ: *{stars} ‚≠ê*\n"
                    f"‚ñ´Ô∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: *{expiry_formatted}*\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
            else:
                await message.reply(
                    f"‚úÖ *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π!*\n\n"
                    f"–û–ø–ª–∞—á–µ–Ω–æ: *{stars} ‚≠ê*\n\n"
                    f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status.",
                    parse_mode=ParseMode.MARKDOWN
                )
        else:
            error_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            if "error" in response.json():
                error_message = response.json().get("error")
            
            await message.reply(
                f"‚ùå *–û—à–∏–±–∫–∞!*\n\n{error_message}",
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await message.reply(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.",
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('extend_'), state=ExtendConfigStates.selecting_duration)
async def process_extend_option(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback_data
    _, days, stars = callback_query.data.split('_')
    days = int(days)
    stars = int(stars)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(days=days, stars=stars)
    
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance = await get_stars_balance(user_id)
    
    if user_balance < stars:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥", callback_data="topup_stars")
        )
        keyboard.add(
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_extend")
        )
        
        await bot.edit_message_text(
            f"‚ö†Ô∏è *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è*\n\n"
            f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞ {days} –¥–Ω–µ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è {stars} ‚≠ê\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balance} ‚≠ê\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Ñ–æ—Ä–º—É
        payment_id, title, description, invoice = await create_stars_invoice(
            user_id=user_id,
            days=days,
            stars=stars
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–æ–π—Å–æ–º
        await bot.send_invoice(
            chat_id=user_id,
            title=title,
            description=description,
            payload=f"extend_{user_id}_{days}_{stars}_{payment_id}",
            provider_token="stars",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Stars
            currency="STARS",
            prices=[LabeledPrice(label=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ {days} –¥–Ω–µ–π", amount=stars)],
            max_tip_amount=0,
            suggested_tip_amounts=[],
            start_parameter=payment_id,
            provider_data=None,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
            disable_notification=False,
            protect_content=False,
            reply_markup=None
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
        await bot.edit_message_text(
            f"‚è∞ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard*\n\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ *{days} –¥–Ω–µ–π* –∑–∞ *{stars} ‚≠ê*\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤—ã—à–µ.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        await ExtendConfigStates.confirming_payment.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã: {str(e)}")
        await bot.edit_message_text(
            f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã*\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥
@dp.callback_query_handler(lambda c: c.data == 'topup_stars')
async def topup_stars(callback_query: types.CallbackQuery):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥."""
    await bot.answer_callback_query(callback_query.id)
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Stars API –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ payments.getStarsTopupOptions
    # –∏ –¥–∞–ª–µ–µ payments.getPaymentForm —Å inputInvoiceStars
    
    # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.edit_message_text(
        "üíµ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Telegram Stars*\n\n"
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥ Telegram, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º Telegram.\n\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π —á–∞—Ç\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è (—Å–∫—Ä–µ–ø–∫–∞)\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç \"‚≠êÔ∏è Stars\"\n"
        "4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        parse_mode=ParseMode.MARKDOWN
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Telegram Stars
@dp.callback_query_handler(lambda c: c.data == 'show_stars_info')
@dp.message_handler(commands=['stars_info'])
async def stars_info(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram Stars."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –æ—Ç callback –∏–ª–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
    is_callback = False
    if not isinstance(message, types.Message):
        is_callback = True
        callback_query = message
        await bot.answer_callback_query(callback_query.id)
        message = callback_query.message
    
    info_text = (
        "‚≠ê *Telegram Stars - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
        "Telegram Stars - —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ Telegram, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ "
        "—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ Telegram.\n\n"
        "–° –ø–æ–º–æ—â—å—é Stars –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ–¥–ª–µ–≤–∞—Ç—å –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ VPN-—Å–µ—Ä–≤–∏—Å—É\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–∞—Ä–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –≤ –±–æ—Ç–∞—Ö\n\n"
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Stars, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram."
    )
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å VPN", callback_data="start_extend")
    )
    
    if is_callback:
        await bot.edit_message_text(
            info_text,
            chat_id=message.chat.id,
            message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    else:
        await message.reply(
            info_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'cancel_extend', state=[ExtendConfigStates.selecting_duration, ExtendConfigStates.confirming_payment])
async def cancel_extend(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    await bot.answer_callback_query(callback_query.id)
    
    await bot.edit_message_text(
        "‚ùå –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@dp.message_handler(commands=['extend'])
@dp.message_handler(lambda message: message.text == "‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å")
async def extend_config_start(message: types.Message):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    response = requests.get(f"{DATABASE_SERVICE_URL}/config/{user_id}")
    
    if response.status_code != 200 or not response.json().get("active", False):
        await message.reply(
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è!*\n\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_data = response.json()
    expiry_time = config_data.get("expiry_time")
    expiry_dt = datetime.fromisoformat(expiry_time)
    expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    for option in EXTEND_OPTIONS:
        keyboard.add(
            InlineKeyboardButton(
                option["label"],
                callback_data=f"extend_{option['days']}_{option['stars']}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_extend"))
    
    await message.reply(
        f"‚è∞ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard*\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ *{expiry_formatted}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await ExtendConfigStates.selecting_duration.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'start_extend')
async def start_extend_from_button(callback_query: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É."""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_query
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    response = requests.get(f"{DATABASE_SERVICE_URL}/config/{user_id}")
    
    if response.status_code != 200 or not response.json().get("active", False):
        await bot.send_message(
            user_id,
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è!*\n\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_data = response.json()
    expiry_time = config_data.get("expiry_time")
    expiry_dt = datetime.fromisoformat(expiry_time)
    expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    for option in EXTEND_OPTIONS:
        keyboard.add(
            InlineKeyboardButton(
                option["label"],
                callback_data=f"extend_{option['days']}_{option['stars']}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_extend"))
    
    await bot.send_message(
        user_id,
        f"‚è∞ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard*\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ *{expiry_formatted}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await ExtendConfigStates.selecting_duration.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
@dp.message_handler(commands=['payments'])
@dp.message_handler(lambda message: message.text == "üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π")
async def get_payment_history(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
    response = requests.get(f"{DATABASE_SERVICE_URL}/payments/history/{user_id}")
    
    if response.status_code == 200:
        payments = response.json().get("payments", [])
        
        if not payments:
            await message.reply(
                "üìä *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–ª–∞—Ç–µ–∂–µ–π
        history_text = "üìä *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"
        
        for i, payment in enumerate(payments[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
            created_at = datetime.fromisoformat(payment["created_at"]).strftime("%d.%m.%Y %H:%M")
            history_text += (
                f"*{i}.* {created_at}\n"
                f"‚ñ´Ô∏è –ü—Ä–æ–¥–ª–µ–Ω–∏–µ: *{payment['days_extended']} –¥–Ω–µ–π*\n"
                f"‚ñ´Ô∏è –û–ø–ª–∞—á–µ–Ω–æ: *{payment['stars_amount']} ‚≠ê*\n"
                f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: *{payment['status']}*\n\n"
            )
        
        await message.reply(
            history_text,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await message.reply(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.MARKDOWN
        )

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def on_startup(dp):
    """Set up bot on startup."""
    logging.info("Bot started!")

    # Set commands for the bot menu
    commands = [
        types.BotCommand("create", "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"),
        types.BotCommand("extend", "–ü—Ä–æ–¥–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"),
        types.BotCommand("status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
        types.BotCommand("payments", "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"),
        types.BotCommand("stars_info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram Stars"),
        types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    ]
    await bot.set_my_commands(commands)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)