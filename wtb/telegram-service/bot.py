import os
import logging
import requests
import json
import uuid
from datetime import datetime, timedelta
import asyncio
import qrcode
from io import BytesIO

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# Configure logging
logging.basicConfig(level=logging.INFO)

# Bot token from environment variable
API_TOKEN = os.getenv('TELEGRAM_TOKEN')
WIREGUARD_SERVICE_URL = os.getenv('WIREGUARD_SERVICE_URL')
DATABASE_SERVICE_URL = os.getenv('DATABASE_SERVICE_URL')

# Initialize bot and dispatcher with FSM storage
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
class ExtendConfigStates(StatesGroup):
    selecting_duration = State()
    confirming_payment = State()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
EXTEND_OPTIONS = [
    {"days": 7, "stars": 500, "label": "7 –¥–Ω–µ–π - 500 ‚≠ê"},
    {"days": 30, "stars": 1800, "label": "30 –¥–Ω–µ–π - 1800 ‚≠ê"},
    {"days": 90, "stars": 5000, "label": "90 –¥–Ω–µ–π - 5000 ‚≠ê"},
    {"days": 365, "stars": 18000, "label": "365 –¥–Ω–µ–π - 18000 ‚≠ê"}
]

# Create a permanent keyboard that will be shown all the time
def get_permanent_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        KeyboardButton("üîë –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"),
        KeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å")
    )
    keyboard.row(
        KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"),
        KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    )
    keyboard.row(
        KeyboardButton("üì• –°–∫–∞—á–∞—Ç—å WireGuard"),
        KeyboardButton("üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π")
    )
    return keyboard

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """Send welcome message when /start command is issued."""
    welcome_text = (
        "üîê *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WireGuard –ë–æ—Ç!* üîê\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–µ–π WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    
    # Create inline keyboard for quick access
    inline_keyboard = InlineKeyboardMarkup(row_width=1)
    inline_keyboard.add(
        InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å WireGuard", url="https://www.wireguard.com/install/"),
        InlineKeyboardButton("üìò –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", url="https://www.wireguard.com/quickstart/")
    )
    
    # Send welcome message with both keyboards
    await message.reply(
        welcome_text, 
        parse_mode=ParseMode.MARKDOWN, 
        reply_markup=inline_keyboard
    )
    
    # Set the permanent keyboard
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:", 
        reply_markup=get_permanent_keyboard()
    )

@dp.message_handler(commands=['help'])
@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def send_help(message: types.Message):
    """Send help information when /help command is issued."""
    help_text = (
        "üîê *WireGuard –ë–æ—Ç - –°–ø—Ä–∞–≤–∫–∞* üîê\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "üîπ `/create` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ *üîë –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é* - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard (–¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞)\n"
        "üîπ `/extend` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ *‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å* - –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard\n"
        "üîπ `/status` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ *üìä –°—Ç–∞—Ç—É—Å* - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
        "üîπ `/payments` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ *üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π* - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π\n"
        "üîπ `/stars_info` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram Stars\n"
        "üîπ `/help` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ *‚ÑπÔ∏è –ü–æ–º–æ—â—å* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üì• –°–∫–∞—á–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é WireGuard –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
        "[wireguard.com/install](https://www.wireguard.com/install/)"
    )
    
    # Add an inline keyboard with useful links
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(
            text="üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard", 
            url="https://www.wireguard.com/install/"
        ),
        InlineKeyboardButton(
            text="üìò –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
            url="https://www.wireguard.com/quickstart/"
        ),
        InlineKeyboardButton(
            text="‚≠ê –û Telegram Stars", 
            callback_data="show_stars_info"
        )
    )
    
    await message.reply(
        help_text, 
        parse_mode=ParseMode.MARKDOWN, 
        reply_markup=keyboard
    )

@dp.message_handler(lambda message: message.text == "üì• –°–∫–∞—á–∞—Ç—å WireGuard")
async def download_wireguard(message: types.Message):
    """Send WireGuard download info."""
    download_text = (
        "üì• *–°–∫–∞—á–∞—Ç—å WireGuard* üì•\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:"
    )
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üçé iOS", url="https://itunes.apple.com/us/app/wireguard/id1441195209"),
        InlineKeyboardButton("ü§ñ Android", url="https://play.google.com/store/apps/details?id=com.wireguard.android")
    )
    keyboard.add(
        InlineKeyboardButton("ü™ü Windows", url="https://download.wireguard.com/windows-client/wireguard-installer.exe"),
        InlineKeyboardButton("üçè macOS", url="https://itunes.apple.com/us/app/wireguard/id1451685025")
    )
    keyboard.add(
        InlineKeyboardButton("üêß Linux", url="https://www.wireguard.com/install/#ubuntu-module-tools")
    )
    
    await message.reply(
        download_text, 
        parse_mode=ParseMode.MARKDOWN, 
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data in ['create', 'status'])
async def process_callback(callback_query: types.CallbackQuery):
    """Process callback buttons."""
    if callback_query.data == 'create':
        await bot.answer_callback_query(callback_query.id)
        await create_config(callback_query.message)
    elif callback_query.data == 'status':
        await bot.answer_callback_query(callback_query.id)
        await check_status(callback_query.message)

@dp.message_handler(commands=['create'])
@dp.message_handler(lambda message: message.text == "üîë –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
async def create_config(message: types.Message):
    """Create a new WireGuard configuration."""
    # If message is from callback, extract user_id from the original message
    if hasattr(message, 'reply_to_message') and message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
    else:
        user_id = message.from_user.id
    
    # Check if user already has an active configuration
    response = requests.get(f"{DATABASE_SERVICE_URL}/config/{user_id}")
    
    if response.status_code == 200 and response.json().get("active", False):
        # User already has an active configuration
        expiry_time = response.json().get("expiry_time")
        expiry_dt = datetime.fromisoformat(expiry_time)
        expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏–µ–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="start_extend")
        )
        
        await message.reply(
            f"‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è!*\n\n"
            f"–û–Ω–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç: `{expiry_formatted}`\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /status –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
        return
    
    # Request new configuration from WireGuard service
    wireguard_response = requests.post(
        f"{WIREGUARD_SERVICE_URL}/create",
        json={"user_id": user_id}
    )
    
    if wireguard_response.status_code == 201:
        config_data = wireguard_response.json()
        config_text = config_data.get("config")
        
        # Calculate expiry time (24 hours from now)
        expiry_time = (datetime.now() + timedelta(hours=24)).isoformat()
        expiry_dt = datetime.fromisoformat(expiry_time)
        expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
        
        # Save configuration to database
        db_response = requests.post(
            f"{DATABASE_SERVICE_URL}/config",
            json={
                "user_id": user_id,
                "config": config_text,
                "expiry_time": expiry_time,
                "active": True
            }
        )
        
        if db_response.status_code == 201:
            # Send configuration to user
            await message.reply(
                f"‚úÖ *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üïí –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: `{expiry_formatted}`\n\n"
                f"```\n{config_text}\n```",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # Generate QR code
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(config_text)
            qr.make(fit=True)
            
            # Create an image from the QR Code
            img = qr.make_image(fill_color="black", back_color="white")
            
            # Save the image to a bytes buffer
            buffer = BytesIO()
            img.save(buffer, format='PNG')
            buffer.seek(0)
            
            # Send QR code as photo
            await bot.send_photo(
                chat_id=user_id,
                photo=buffer,
                caption="üì± QR-–∫–æ–¥ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π WireGuard. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
            )
            
            # Also send as a file
            config_filename = f"config{user_id}.conf"
            with open(config_filename, "w") as f:
                f.write(config_text)
            
            # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏–µ–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton(
                    "üì• –°–∫–∞—á–∞—Ç—å WireGuard", 
                    url="https://www.wireguard.com/install/"
                ),
                InlineKeyboardButton(
                    "‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å —Å–µ–π—á–∞—Å", 
                    callback_data="start_extend"
                )
            )
            
            await bot.send_document(
                chat_id=user_id,
                document=types.InputFile(config_filename),
                caption="üìÑ –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞",
                reply_markup=keyboard
            )
            
            # Remove the temporary file
            os.remove(config_filename)
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(commands=['status'])
@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å")
async def check_status(message: types.Message):
    """Check the status of user's WireGuard configuration."""
    # If message is from callback, extract user_id from the original message
    if hasattr(message, 'reply_to_message') and message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
    else:
        user_id = message.from_user.id
    
    # Get user configuration from database
    response = requests.get(f"{DATABASE_SERVICE_URL}/config/{user_id}")
    
    if response.status_code == 200:
        config_data = response.json()
        
        if config_data.get("active", False):
            expiry_time = config_data.get("expiry_time")
            current_time = datetime.now().isoformat()
            
            if expiry_time > current_time:
                # Calculate remaining time
                expiry_dt = datetime.fromisoformat(expiry_time)
                current_dt = datetime.now()
                remaining = expiry_dt - current_dt
                
                days = remaining.days
                hours, remainder = divmod(remaining.seconds, 3600)
                minutes, _ = divmod(remainder, 60)
                
                expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
                
                status_text = (
                    f"‚úÖ *–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard*\n\n"
                    f"üü¢ *–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–Ω–∞\n"
                    f"üïí *–ò—Å—Ç–µ–∫–∞–µ—Ç:* {expiry_formatted}\n"
                    f"‚è≥ *–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:* {days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω.\n\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                if days < 7:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 7 –¥–Ω–µ–π
                    status_text += "‚ö†Ô∏è *–°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è!* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.\n\n"
                
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(
                    InlineKeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="start_extend"),
                    InlineKeyboardButton("üì± –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥ –∏ —Ñ–∞–π–ª", callback_data="show_config")
                )
                
                await message.reply(
                    status_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
                
                # Generate and send QR code and config file
                config_text = config_data.get("config")
                
                # Generate QR code
                qr = qrcode.QRCode(
                    version=1,
                    error_correction=qrcode.constants.ERROR_CORRECT_L,
                    box_size=10,
                    border=4,
                )
                qr.add_data(config_text)
                qr.make(fit=True)
                
                # Create an image from the QR Code
                img = qr.make_image(fill_color="black", back_color="white")
                
                # Save the image to a bytes buffer
                buffer = BytesIO()
                img.save(buffer, format='PNG')
                buffer.seek(0)
                
                # Send QR code as photo
                await bot.send_photo(
                    chat_id=user_id,
                    photo=buffer,
                    caption="üì± –í–∞—à QR-–∫–æ–¥ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π WireGuard"
                )
                
                # Also send as a file
                config_filename = f"config{user_id}.conf"
                with open(config_filename, "w") as f:
                    f.write(config_text)
                
                await bot.send_document(
                    chat_id=user_id,
                    document=types.InputFile(config_filename),
                    caption="üìÑ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard"
                )
                
                # Remove the temporary file
                os.remove(config_filename)
            else:
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(
                    InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="create"),
                    InlineKeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é", callback_data="start_extend")
                )
                
                await message.reply(
                    "üî¥ *–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞.*\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é.",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
        else:
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("üîë –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="create")
            )
            
            await message.reply(
                "‚ÑπÔ∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.*\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WireGuard.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
    else:
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üîë –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="create")
        )
        
        await message.reply(
            "‚ÑπÔ∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.*\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WireGuard.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )

@dp.callback_query_handler(lambda c: c.data == 'show_config')
async def show_config(callback_query: types.CallbackQuery):
    """Show configuration QR code and file again."""
    await bot.answer_callback_query(callback_query.id)
    await check_status(callback_query.message)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Telegram Stars
async def get_stars_balance(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Telegram Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –∫ API Telegram —á–µ—Ä–µ–∑ MTProto –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
    # –í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å payments.getStarsStatus
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å
    balance = 10000  # 10000 –∑–≤–µ–∑–¥
    return balance

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã
def create_stars_invoice(user_id, days, stars):
    """–°–æ–∑–¥–∞–Ω–∏–µ invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏."""
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã
    form_id = int(uuid.uuid4().int & (1<<63)-1)
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    title = f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ WireGuard –Ω–∞ {days} –¥–Ω–µ–π"
    description = f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN —á–µ—Ä–µ–∑ WireGuard –Ω–∞ {days} –¥–Ω–µ–π"
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç invoice (—ç—Ç–æ JSON, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram)
    invoice = {
        "star_amount": stars,
        "telegram_payment_charge_id": f"wireguard_extension_{user_id}_{int(datetime.now().timestamp())}",
        "provider_payment_charge_id": f"extension_{days}d_{int(datetime.now().timestamp())}"
    }
    
    return form_id, title, description, invoice

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@dp.message_handler(commands=['extend'])
@dp.message_handler(lambda message: message.text == "‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å")
async def extend_config_start(message: types.Message):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    response = requests.get(f"{DATABASE_SERVICE_URL}/config/{user_id}")
    
    if response.status_code != 200 or not response.json().get("active", False):
        await message.reply(
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è!*\n\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_data = response.json()
    expiry_time = config_data.get("expiry_time")
    expiry_dt = datetime.fromisoformat(expiry_time)
    expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    for option in EXTEND_OPTIONS:
        keyboard.add(
            InlineKeyboardButton(
                option["label"],
                callback_data=f"extend_{option['days']}_{option['stars']}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_extend"))
    
    await message.reply(
        f"‚è∞ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard*\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ *{expiry_formatted}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await ExtendConfigStates.selecting_duration.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'start_extend')
async def start_extend_from_button(callback_query: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É."""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_query
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    response = requests.get(f"{DATABASE_SERVICE_URL}/config/{user_id}")
    
    if response.status_code != 200 or not response.json().get("active", False):
        await bot.send_message(
            user_id,
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è!*\n\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_data = response.json()
    expiry_time = config_data.get("expiry_time")
    expiry_dt = datetime.fromisoformat(expiry_time)
    expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    for option in EXTEND_OPTIONS:
        keyboard.add(
            InlineKeyboardButton(
                option["label"],
                callback_data=f"extend_{option['days']}_{option['stars']}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_extend"))
    
    await bot.send_message(
        user_id,
        f"‚è∞ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard*\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ *{expiry_formatted}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await ExtendConfigStates.selecting_duration.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('extend_'), state=ExtendConfigStates.selecting_duration)
async def process_extend_option(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback_data
    _, days, stars = callback_query.data.split('_')
    days = int(days)
    stars = int(stars)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(days=days, stars=stars)
    
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    user_balance = await get_stars_balance(user_id)
    
    if user_balance < stars:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥", callback_data="topup_stars")
        )
        keyboard.add(
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_extend")
        )
        
        await bot.edit_message_text(
            f"‚ö†Ô∏è *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è*\n\n"
            f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞ {days} –¥–Ω–µ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è {stars} ‚≠ê\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balance} ‚≠ê\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Ñ–æ—Ä–º—É
    form_id, title, description, invoice = create_stars_invoice(
        user_id=user_id,
        days=days,
        stars=stars
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        form_id=form_id,
        title=title,
        description=description,
        invoice=json.dumps(invoice)
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(
            f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {stars} ‚≠ê",
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
            callback_data=f"pay_stars_{form_id}"
        )
    )
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_extend"))
    
    await bot.edit_message_text(
        f"‚è∞ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard*\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ *{days} –¥–Ω–µ–π* –∑–∞ *{stars} ‚≠ê*\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    await ExtendConfigStates.confirming_payment.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'cancel_extend', state=[ExtendConfigStates.selecting_duration, ExtendConfigStates.confirming_payment])
async def cancel_extend(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    await bot.answer_callback_query(callback_query.id)
    
    await bot.edit_message_text(
        "‚ùå –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
@dp.callback_query_handler(lambda c: c.data.startswith('pay_stars_'), state=ExtendConfigStates.confirming_payment)
async def process_stars_payment(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏."""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º form_id –∏–∑ callback_data
    _, _, form_id = callback_query.data.split('_', 2)
    form_id = int(form_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    days = data.get('days')
    stars = data.get('stars')
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_query
    user_id = callback_query.from_user.id
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –∫ API Telegram
    # –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ payments.sendStarsForm
    
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
    payment_successful = True
    transaction_id = f"stars_payment_{user_id}_{int(datetime.now().timestamp())}"
    
    if payment_successful:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        response = requests.post(
            f"{DATABASE_SERVICE_URL}/config/extend",
            json={
                "user_id": user_id,
                "days": days,
                "stars_amount": stars,
                "transaction_id": transaction_id
            }
        )
        
        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_response = requests.get(f"{DATABASE_SERVICE_URL}/config/{user_id}")
            
            if config_response.status_code == 200:
                config_data = config_response.json()
                expiry_time = config_data.get("expiry_time")
                expiry_dt = datetime.fromisoformat(expiry_time)
                expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(
                    InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status")
                )
                
                await bot.edit_message_text(
                    f"‚úÖ *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!*\n\n"
                    f"‚ñ´Ô∏è –ü—Ä–æ–¥–ª–µ–Ω–∏–µ: *{days} –¥–Ω–µ–π*\n"
                    f"‚ñ´Ô∏è –û–ø–ª–∞—á–µ–Ω–æ: *{stars} ‚≠ê*\n"
                    f"‚ñ´Ô∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: *{expiry_formatted}*\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
            else:
                await bot.edit_message_text(
                    f"‚úÖ *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π!*\n\n"
                    f"–û–ø–ª–∞—á–µ–Ω–æ: *{stars} ‚≠ê*\n\n"
                    f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status.",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    parse_mode=ParseMode.MARKDOWN
                )
        else:
            error_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            if "error" in response.json():
                error_message = response.json().get("error")
            
            await bot.edit_message_text(
                f"‚ùå *–û—à–∏–±–∫–∞!*\n\n{error_message}",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode=ParseMode.MARKDOWN
            )
    else:
        await bot.edit_message_text(
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥
@dp.callback_query_handler(lambda c: c.data == 'topup_stars')
async def topup_stars(callback_query: types.CallbackQuery):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥."""
    await bot.answer_callback_query(callback_query.id)
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Stars API –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ payments.getStarsTopupOptions
    # –∏ –¥–∞–ª–µ–µ payments.getPaymentForm —Å inputInvoiceStars
    
    # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.edit_message_text(
        "üíµ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Telegram Stars*\n\n"
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥ Telegram, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º Telegram.\n\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π —á–∞—Ç\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è (—Å–∫—Ä–µ–ø–∫–∞)\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç \"‚≠êÔ∏è Stars\"\n"
        "4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        parse_mode=ParseMode.MARKDOWN
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Telegram Stars
@dp.callback_query_handler(lambda c: c.data == 'show_stars_info')
@dp.message_handler(commands=['stars_info'])
async def stars_info(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram Stars."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –æ—Ç callback –∏–ª–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
    is_callback = False
    if not isinstance(message, types.Message):
        is_callback = True
        callback_query = message
        await bot.answer_callback_query(callback_query.id)
        message = callback_query.message
    
    info_text = (
        "‚≠ê *Telegram Stars - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
        "Telegram Stars - —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ Telegram, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ "
        "—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ Telegram.\n\n"
        "–° –ø–æ–º–æ—â—å—é Stars –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ–¥–ª–µ–≤–∞—Ç—å –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ VPN-—Å–µ—Ä–≤–∏—Å—É\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–∞—Ä–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –≤ –±–æ—Ç–∞—Ö\n\n"
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Stars, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram."
    )
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å VPN", callback_data="start_extend")
    )
    
    if is_callback:
        await bot.edit_message_text(
            info_text,
            chat_id=message.chat.id,
            message_id=message.message_id,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    else:
        await message.reply(
            info_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
@dp.message_handler(commands=['payments'])
@dp.message_handler(lambda message: message.text == "üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π")
async def get_payment_history(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
    response = requests.get(f"{DATABASE_SERVICE_URL}/payments/history/{user_id}")
    
    if response.status_code == 200:
        payments = response.json().get("payments", [])
        
        if not payments:
            await message.reply(
                "üìä *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–ª–∞—Ç–µ–∂–µ–π
        history_text = "üìä *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"
        
        for i, payment in enumerate(payments[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
            created_at = datetime.fromisoformat(payment["created_at"]).strftime("%d.%m.%Y %H:%M")
            history_text += (
                f"*{i}.* {created_at}\n"
                f"‚ñ´Ô∏è –ü—Ä–æ–¥–ª–µ–Ω–∏–µ: *{payment['days_extended']} –¥–Ω–µ–π*\n"
                f"‚ñ´Ô∏è –û–ø–ª–∞—á–µ–Ω–æ: *{payment['stars_amount']} ‚≠ê*\n"
                f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: *{payment['status']}*\n\n"
            )
        
        await message.reply(
            history_text,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await message.reply(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.MARKDOWN
        )

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def on_startup(dp):
    """Set up bot on startup."""
    logging.info("Bot started!")

    # Set commands for the bot menu
    commands = [
        types.BotCommand("create", "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"),
        types.BotCommand("extend", "–ü—Ä–æ–¥–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"),
        types.BotCommand("status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
        types.BotCommand("payments", "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"),
        types.BotCommand("stars_info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram Stars"),
        types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    ]
    await bot.set_my_commands(commands)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)