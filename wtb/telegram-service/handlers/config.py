from aiogram import types, Dispatcher
from aiogram.types import ParseMode
from io import BytesIO

from core.settings import bot, logger
from utils.bd import get_config_from_wireguard
from utils.qr import generate_config_qr

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async def get_config_file(callback_query: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ QR-–∫–æ–¥–∞."""
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ WireGuard —Å–µ—Ä–≤–∏—Å–∞
        config_data = await get_config_from_wireguard(user_id)
        
        if "error" in config_data:
            await bot.send_message(
                user_id,
                f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏*\n\n{config_data['error']}",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        config_text = config_data.get("config_text")
        
        if not config_text:
            await bot.send_message(
                user_id,
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏*\n\n"
                "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_file = BytesIO(config_text.encode('utf-8'))
        config_file.name = f"vpn_duck_{user_id}.conf"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        qr_buffer = await generate_config_qr(config_text)
        
        if qr_buffer:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
            await bot.send_photo(
                user_id,
                qr_buffer,
                caption="üîë *QR-–∫–æ–¥ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard*\n\n"
                        "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                parse_mode=ParseMode.MARKDOWN
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await bot.send_document(
            user_id,
            config_file,
            caption="üìã *–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard*\n\n"
                    "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions_text = (
            "üì± *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:*\n\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
            "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '+'\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥' –∏–ª–∏ '–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞'\n"
            "4Ô∏è‚É£ –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
            "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ VPN Duck ü¶Ü"
        )
        
        await bot.send_message(
            user_id,
            instructions_text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        await bot.send_message(
            user_id,
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.MARKDOWN
        )

def register_handlers_config(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    dp.register_callback_query_handler(get_config_file, lambda c: c.data == "get_config")