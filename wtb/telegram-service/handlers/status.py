from aiogram import types, Dispatcher
from aiogram.types import ParseMode
from datetime import datetime

from core.settings import bot, logger
from keyboards.keyboards import get_active_config_keyboard, get_create_config_keyboard
from utils.bd import get_user_config

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /status
# async def get_config_status(message: types.Message):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
#     user_id = message.from_user.id
    
#     try:
#         # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#         config = await get_user_config(user_id)
        
#         if config and config.get("active", False):
#             # –ü–∞—Ä—Å–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#             created_at = datetime.fromisoformat(config.get("created_at")).strftime("%d.%m.%Y %H:%M:%S")
#             expiry_time = datetime.fromisoformat(config.get("expiry_time"))
#             expiry_formatted = expiry_time.strftime("%d.%m.%Y %H:%M:%S")
            
#             # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
#             now = datetime.now()
#             remaining_time = expiry_time - now
#             remaining_days = remaining_time.days
#             remaining_hours = remaining_time.seconds // 3600
            
#             # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
#             geolocation_name = config.get("geolocation_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
#             # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#             status_text = (
#                 f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard</b>\n\n"
#                 f"‚ñ´Ô∏è –ê–∫—Ç–∏–≤–Ω–∞: <b>–î–∞</b>\n"
#                 f"‚ñ´Ô∏è –°–æ–∑–¥–∞–Ω–∞: <b>{created_at}</b>\n"
#                 f"‚ñ´Ô∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{expiry_formatted}</b>\n"
#                 f"‚ñ´Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: <b>{remaining_days} –¥–Ω. {remaining_hours} —á.</b>\n"
#                 f"‚ñ´Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{geolocation_name}</b>"
#             )
            
#             # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#             keyboard = get_active_config_keyboard()
            
#             await message.reply(
#                 status_text,
#                 parse_mode=ParseMode.HTML,
#                 reply_markup=keyboard
#             )
#         else:
#             keyboard = get_create_config_keyboard()
            
#             await message.reply(
#                 "‚ö†Ô∏è <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
#                 "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create.",
#                 parse_mode=ParseMode.HTML,
#                 reply_markup=keyboard
#             )
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}", exc_info=True)
#         await message.reply(
#             "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
#             parse_mode=ParseMode.HTML
#         )
async def get_config_status(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = await get_user_config(user_id)
        
        if config and config.get("active", False):
            # –ü–∞—Ä—Å–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                created_at = datetime.fromisoformat(config.get("created_at")).strftime("%d.%m.%Y %H:%M:%S")
            except (ValueError, TypeError):
                created_at = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            try:
                expiry_time_str = config.get("expiry_time")
                expiry_time = datetime.fromisoformat(expiry_time_str)
                expiry_formatted = expiry_time.strftime("%d.%m.%Y %H:%M:%S")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                now = datetime.now()
                remaining_time = expiry_time - now
                remaining_days = max(0, remaining_time.days)
                remaining_hours = max(0, remaining_time.seconds // 3600)
            except (ValueError, TypeError, AttributeError):
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è: {config.get('expiry_time')}")
                expiry_formatted = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                remaining_days = 0
                remaining_hours = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            geolocation_name = config.get("geolocation_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            status_text = (
                f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard</b>\n\n"
                f"‚ñ´Ô∏è –ê–∫—Ç–∏–≤–Ω–∞: <b>–î–∞</b>\n"
                f"‚ñ´Ô∏è –°–æ–∑–¥–∞–Ω–∞: <b>{created_at}</b>\n"
                f"‚ñ´Ô∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{expiry_formatted}</b>\n"
                f"‚ñ´Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: <b>{remaining_days} –¥–Ω. {remaining_hours} —á.</b>\n"
                f"‚ñ´Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{geolocation_name}</b>"
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = get_active_config_keyboard()
            
            await message.reply(
                status_text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        else:
            keyboard = get_create_config_keyboard()
            
            await message.reply(
                "‚ö†Ô∏è <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create.",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}", exc_info=True)
        await message.reply(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback –∫–Ω–æ–ø–∫–∏ status
async def status_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ callback."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–ª–±—ç–∫ –Ω–µ –±—ã–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω middleware
    if getattr(callback_query, '_handled', False):
        logger.info(f"–ö–æ–ª–±—ç–∫ {callback_query.data} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω middleware, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
        
    await bot.answer_callback_query(callback_query.id)
    
    user_id = callback_query.from_user.id
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = await get_user_config(user_id)
        
        if config and config.get("active", False):
            # –ü–∞—Ä—Å–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            expiry_time = datetime.fromisoformat(config.get("expiry_time"))
            expiry_formatted = expiry_time.strftime("%d.%m.%Y %H:%M:%S")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            geolocation_name = config.get("geolocation_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            now = datetime.now()
            remaining_time = expiry_time - now
            remaining_days = remaining_time.days
            remaining_hours = remaining_time.seconds // 3600
            
            await bot.send_message(
                user_id,
                f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                f"‚ñ´Ô∏è –ê–∫—Ç–∏–≤–Ω–∞: <b>–î–∞</b>\n"
                f"‚ñ´Ô∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{expiry_formatted}</b>\n"
                f"‚ñ´Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: <b>{remaining_days} –¥–Ω. {remaining_hours} —á.</b>\n"
                f"‚ñ´Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{geolocation_name}</b>",
                parse_mode=ParseMode.HTML
            )
        else:
            await bot.send_message(
                user_id,
                "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}", exc_info=True)
        await bot.send_message(
            user_id,
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )

def register_handlers_status(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."""
    dp.register_message_handler(get_config_status, commands=['status'])
    dp.register_message_handler(get_config_status, lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å")
    dp.register_callback_query_handler(status_callback, lambda c: c.data == "status", state="*")