from aiogram import types, Dispatcher
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from datetime import datetime
from io import BytesIO

from core.settings import bot, logger
from states.states import GeoLocationStates
from keyboards.keyboards import get_permanent_keyboard
from utils.bd import get_user_config, get_available_geolocations, change_config_geolocation, get_all_user_configs
from utils.qr import generate_config_qr

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è–º–∏
def get_geolocation_keyboard(geolocations):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è–º–∏."""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for geo in geolocations:
        geo_id = geo.get('id')
        geo_name = geo.get('name')
        server_count = geo.get('active_servers_count', 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        button_text = f"{geo_name} ({server_count} —Å–µ—Ä–≤–µ—Ä–æ–≤)"
        
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"geo_{geo_id}")
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_geo")
    )
    
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def choose_geolocation(message: types.Message, state: FSMContext):
    """–í—ã–±–æ—Ä –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        user_id = message.from_user.id
        config = await get_user_config(user_id)
        
        if not config or not config.get("active", False):
            await message.reply(
                "‚ö†Ô∏è <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π
        geolocations = await get_available_geolocations()
        
        if not geolocations:
            await message.reply(
                "‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(geolocations=geolocations)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è–º–∏
        keyboard = get_geolocation_keyboard(geolocations)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        current_geo_id = config.get("geolocation_id")
        current_geo_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        for geo in geolocations:
            if geo.get('id') == current_geo_id:
                current_geo_name = geo.get('name')
                break
        
        await message.reply(
            f"üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ VPN</b>\n\n"
            f"–û—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n\n"
            f"–¢–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{current_geo_name}</b>\n\n"
            f"–ü—Ä–∏ —Å–º–µ–Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞, "
            f"—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º.",
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        await GeoLocationStates.selecting_geolocation.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π: {str(e)}", exc_info=True)
        await message.reply(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def callback_choose_geolocation(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    await bot.answer_callback_query(callback_query.id)
    
    user_id = callback_query.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = await get_user_config(user_id)
        
        if not config or not config.get("active", False):
            await bot.send_message(
                user_id,
                "‚ö†Ô∏è <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π
        geolocations = await get_available_geolocations()
        
        if not geolocations:
            await bot.send_message(
                user_id,
                "‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(geolocations=geolocations)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è–º–∏
        keyboard = get_geolocation_keyboard(geolocations)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        current_geo_id = config.get("geolocation_id")
        current_geo_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        for geo in geolocations:
            if geo.get('id') == current_geo_id:
                current_geo_name = geo.get('name')
                break
        
        await bot.send_message(
            user_id,
            f"üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ VPN</b>\n\n"
            f"–û—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n\n"
            f"–¢–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{current_geo_name}</b>\n\n"
            f"–ü—Ä–∏ —Å–º–µ–Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞, "
            f"—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º.",
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        await GeoLocationStates.selecting_geolocation.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π: {str(e)}", exc_info=True)
        await bot.send_message(
            user_id,
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
async def process_geolocation_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    geolocation_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    geolocations = state_data.get('geolocations', [])
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    geolocation_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è"
    for geo in geolocations:
        if geo.get('id') == geolocation_id:
            geolocation_name = geo.get('name')
            break
    
    try:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        await bot.edit_message_text(
            f"üîÑ <b>–ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...</b>\n\n"
            f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{geolocation_name}</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.HTML
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        result = await change_config_geolocation(user_id, geolocation_id)
        
        if "error" in result:
            await bot.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n{result['error']}",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode=ParseMode.HTML
            )
            await state.finish()
            return
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await bot.edit_message_text(
            f"‚úÖ <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞</b> <b>{geolocation_name}</b>\n\n"
            f"–í—Å–µ –≤–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã –Ω–∞ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n\n"
            f"–ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç WireGuard, –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. "
            f"–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º —Å–µ–π—á–∞—Å.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.HTML
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = await get_user_config(user_id)
        
        if config and config.get("config"):
            config_text = config.get("config")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_file = BytesIO(config_text.encode('utf-8'))
            config_file.name = f"vpn_duck_{user_id}.conf"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            qr_buffer = await generate_config_qr(config_text)
            
            if qr_buffer:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
                await bot.send_photo(
                    user_id,
                    qr_buffer,
                    caption=f"üîë <b>QR-–∫–æ–¥ –≤–∞—à–µ–π –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard</b>\n\n"
                            f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{geolocation_name}</b>\n\n"
                            f"–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    parse_mode=ParseMode.HTML
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await bot.send_document(
                user_id,
                config_file,
                caption=f"üìã <b>–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard</b>\n\n"
                        f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{geolocation_name}</b>\n\n"
                        f"–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status")
            )
            
            await bot.send_message(
                user_id,
                f"üì± <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ VPN Duck</b>\n\n"
                f"–î–ª—è –±–æ–ª–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, "
                f"–∫–æ—Ç–æ—Ä–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è–º–∏ "
                f"–±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞: <b>VPN Duck</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                user_id,
                "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        await bot.send_message(
            user_id,
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def cancel_geolocation_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    await bot.answer_callback_query(callback_query.id)
    
    await bot.edit_message_text(
        "‚ùå –í—ã–±–æ—Ä –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
async def get_all_configs(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤."""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await get_all_user_configs(user_id)
        
        if "error" in result:
            await message.reply(
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</b>\n\n{result['error']}",
                parse_mode=ParseMode.HTML
            )
            return
        
        active_config = result.get("active_config", {})
        all_configs = result.get("all_configs", [])
        
        if not all_configs:
            await message.reply(
                "‚ö†Ô∏è <b>–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è–º
        geo_configs = {}
        for config in all_configs:
            geo_code = config.get("geo_code")
            geo_name = config.get("geo_name")
            
            if geo_code not in geo_configs:
                geo_configs[geo_code] = {
                    "name": geo_name,
                    "configs": []
                }
            
            geo_configs[geo_code]["configs"].append(config)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö
        message_text = f"üìã <b>–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN Duck</b>\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        expiry_time = active_config.get("expiry_time")
        if expiry_time:
            try:
                expiry_dt = datetime.fromisoformat(expiry_time)
                expiry_formatted = expiry_dt.strftime("%d.%m.%Y %H:%M:%S")
                
                message_text += (
                    f"<b>–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
                    f"‚ñ´Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ <b>{expiry_formatted}</b>\n\n"
                )
            except Exception:
                pass
        
        message_text += "–ù–∏–∂–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º.\n"
        
        await message.reply(message_text, parse_mode=ParseMode.HTML)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        for geo_code, geo_data in geo_configs.items():
            geo_name = geo_data["name"]
            configs = geo_data["configs"]
            
            await message.reply(
                f"üåç <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {geo_name}</b>\n\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: <b>{len(configs)}</b>\n\n"
                f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —ç—Ç–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...",
                parse_mode=ParseMode.HTML
            )
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è —ç—Ç–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            zip_buffer = BytesIO()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å zipfile –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
            import zipfile
            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                for i, config in enumerate(configs, 1):
                    server_endpoint = config.get("endpoint")
                    config_text = config.get("config_text")
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    config_filename = f"vpn_duck_{geo_code}_{i}_{server_endpoint}.conf"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∞—Ä—Ö–∏–≤
                    zip_file.writestr(config_filename, config_text)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
            zip_buffer.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
            zip_buffer.name = f"vpn_duck_{geo_code}_configs.zip"
            await message.reply_document(
                zip_buffer,
                caption=f"üì¶ <b>–ê—Ä—Ö–∏–≤ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è {geo_name}</b>\n\n"
                        f"–°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —ç—Ç–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n\n"
                        f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º VPN Duck —Ä–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤ –∏ "
                        f"–∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                parse_mode=ParseMode.HTML
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await message.reply(
            "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è VPN Duck</b>\n\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ VPN Duck\n"
            "2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
            "3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä\n"
            "4. –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä\n\n"
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ VPN Duck –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ—Å—à–æ–≤–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –≤ —Å–ª—É—á–∞–µ "
            "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {str(e)}", exc_info=True)
        await message.reply(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await bot.answer_callback_query(callback_query.id)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()
    if current_state:
        await state.finish()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.first_name
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    config = await get_user_config(user_id)
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if config and config.get("active", False):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        geo_name = config.get("geolocation_name", "–†–æ—Å—Å–∏—è")
        
        keyboard.add(
            InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
            InlineKeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_config")
        )
        keyboard.add(
            InlineKeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="start_extend"),
            InlineKeyboardButton("üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è", callback_data="choose_geo")
        )
        keyboard.add(
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å", callback_data="recreate_config")
        )
        
        await bot.edit_message_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç VPN Duck! ü¶Ü\n\n"
            f"–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n"
            f"‚ñ´Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{geo_name}</b>\n\n"
            f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–µ–π –ª–∏—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π WireGuard VPN "
            f"—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
        keyboard.add(
            InlineKeyboardButton("üîë –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="create_config")
        )
        
        await bot.edit_message_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç VPN Duck! ü¶Ü\n\n"
            f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–µ–π –ª–∏—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π WireGuard VPN "
            f"—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )

def register_handlers_geolocation(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–π."""
    dp.register_message_handler(choose_geolocation, commands=['geolocation'])
    dp.register_message_handler(choose_geolocation, lambda message: message.text == "üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è")
    dp.register_message_handler(get_all_configs, commands=['allconfigs'])
    dp.register_callback_query_handler(process_geolocation_selection, lambda c: c.data.startswith('geo_'), state=GeoLocationStates.selecting_geolocation)
    dp.register_callback_query_handler(cancel_geolocation_selection, lambda c: c.data == 'cancel_geo', state=GeoLocationStates.selecting_geolocation)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è UI-–∫–Ω–æ–ø–æ–∫
    dp.register_callback_query_handler(callback_choose_geolocation, lambda c: c.data == 'choose_geo')
    dp.register_callback_query_handler(get_all_configs, lambda c: c.data == 'get_all_configs')
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    dp.register_callback_query_handler(back_to_main_menu, lambda c: c.data == 'back_to_main', state='*')