{% extends 'base.html' %}

{% block title %}Servers Management{% endblock %}

{% block content %}
<div class="container-fluid">
    <h1 class="h3 mb-4 text-gray-800">WireGuard Servers</h1>
    
    <!-- Overview Cards -->
    <div class="row">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Servers</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ servers|length }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-server fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Active Servers</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ active_servers }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Total Peers</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ total_peers }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-users fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Locations</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ locations }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-globe fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Servers Table Card -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">Remote Servers</h6>
            <!-- <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addServerModal">
                <i class="fas fa-plus fa-sm"></i> Add Server
            </button> -->
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addServerModal">
                <i class="bi bi-plus-circle"></i> Добавить сервер
            </button>  

        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="serversTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Location</th>
                            <th>Geolocation</th>
                            <th>URL</th>
                            <th>Status</th>
                            <th>Peers</th>
                            <th>Load</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for server in servers %}
                        <tr>
                            <td>{{ server.name }}</td>
                            <td>{{ server.location }}</td>
                            <td>{{ server.geolocation_name }}</td>
                            <td>{{ server.api_url }}</td>
                            <td>
                                {% if server.is_active %}
                                <span class="badge badge-success">Active</span>
                                {% else %}
                                <span class="badge badge-danger">Inactive</span>
                                {% endif %}
                            </td>
                            <td>{{ server.peers_count|default('0') }}</td>
                            <td>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" style="width: {{ server.load|default('0') }}%"
                                         aria-valuenow="{{ server.load|default('0') }}" aria-valuemin="0" aria-valuemax="100">
                                        {{ server.load|default('0') }}%
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-sm btn-info" 
                                            onclick="location.href='/servers/details/{{ server.id }}'">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-primary" 
                                            data-toggle="modal" data-target="#editServerModal" 
                                            data-server-id="{{ server.id }}">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-danger" 
                                            data-toggle="modal" data-target="#deleteServerModal" 
                                            data-server-id="{{ server.id }}" data-server-name="{{ server.name }}">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Server Status Card -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Servers Status</h6>
        </div>
        <div class="card-body">
            <div class="row">
                {% for server in server_status %}
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-{{ 'success' if server.status == 'online' else 'danger' }} shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-{{ 'success' if server.status == 'online' else 'danger' }} text-uppercase mb-1">
                                        {{ server.name }}
                                    </div>
                                    <div class="h6 mb-0 font-weight-bold text-gray-800">{{ server.location }}</div>
                                    <div class="small text-gray-600">
                                        {% if server.status == 'online' %}
                                            <span class="text-success">
                                                <i class="fas fa-circle fa-sm"></i> Online
                                            </span>
                                            <span class="ml-2">{{ server.peers_count }} peers</span>
                                            <span class="ml-2">{{ server.response_time|round(2) }}ms</span>
                                        {% else %}
                                            <span class="text-danger">
                                                <i class="fas fa-times-circle fa-sm"></i> Offline
                                            </span>
                                        {% endif %}
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-server fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
    </div>
</div>

<!-- Модифицированная форма добавления сервера с полем для внутреннего IP -->
<div class="modal fade" id="addServerModal" tabindex="-1" aria-labelledby="addServerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addServerModalLabel">Добавление нового сервера</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addServerForm">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="server_name" class="form-label">Имя сервера</label>
                            <input type="text" class="form-control" id="server_name" name="server_name" required>
                            <div class="form-text">Уникальное имя для идентификации сервера</div>
                        </div>
                        <div class="col-md-6">
                            <label for="location" class="form-label">Код локации</label>
                            <input type="text" class="form-control" id="location" name="location" required>
                            <div class="form-text">Код страны (например, ru, us, de)</div>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="endpoint" class="form-label">Внешний IP (Endpoint)</label>
                            <input type="text" class="form-control" id="endpoint" name="endpoint" required>
                            <div class="form-text">Внешний IP-адрес сервера (например, 5.180.137.197)</div>
                        </div>
                        <div class="col-md-6">
                            <label for="port" class="form-label">Порт</label>
                            <input type="number" class="form-control" id="port" name="port" value="51820" required>
                            <div class="form-text">Порт для подключения WireGuard (обычно 51820)</div>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="address" class="form-label">Внутренний IP</label>
                            <input type="text" class="form-control" id="address" name="address" placeholder="10.0.0.1/24" required>
                            <div class="form-text">Внутренний IP-адрес сервера с маской сети</div>
                        </div>
                        <div class="col-md-6">
                            <label for="public_key" class="form-label">Публичный ключ</label>
                            <input type="text" class="form-control" id="public_key" name="public_key" required>
                            <div class="form-text">Публичный ключ WireGuard</div>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="api_url" class="form-label">API URL</label>
                            <div class="input-group">
                                <span class="input-group-text">http://</span>
                                <input type="text" class="form-control" id="api_ip" placeholder="IP-адрес">
                                <span class="input-group-text">/</span>
                            </div>
                            <input type="hidden" id="api_url" name="api_url">
                            <div class="form-text">IP-адрес для доступа к API сервера</div>
                        </div>
                        <div class="col-md-6">
                            <label for="geolocation_id" class="form-label">Геолокация</label>
                            <select class="form-select" id="geolocation_id" name="geolocation_id" required>
                                <option value="">Выберите геолокацию</option>
                                <!-- Опции будут добавлены через JavaScript -->
                            </select>
                            <div class="form-text">Выберите геолокацию сервера</div>
                        </div>
                    </div>
                    
                    <!-- Измените блок API ключа в модальном окне addServerModal -->
                    <div id="api_key_auth">
                        <div class="form-group">
                            <label for="api_key_display">API Ключ (генерируется автоматически)</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="api_key_display" readonly>
                                <button class="btn btn-outline-secondary" type="button" onclick="copyApiKey()">
                                    <i class="bi bi-clipboard"></i> Копировать
                                </button>
                            </div>
                            <!-- Скрытое поле для хранения API ключа -->
                            <input type="hidden" id="api_key" name="api_key">
                        </div>
                    </div>

           <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="max_peers" class="form-label">Максимум пиров</label>
                            <input type="number" class="form-control" id="max_peers" name="max_peers" value="100">
                            <div class="form-text">Максимальное количество подключений</div>
                        </div>
                        <div class="col-md-6 d-flex align-items-end">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="active" name="active" checked>
                                <label class="form-check-label" for="active">
                                    Активен
                                </label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="addServerBtn">Добавить сервер</button>
            </div>
        </div>
    </div>
</div>
                    
                    <!-- API Key Authentication -->
                    <div id="api_key_auth">
                        <div class="form-group">
                            <label for="api_key">API Key</label>
                            <input type="hidden" id="api_key_hidden" name="api_key" value="A3cvHGCJMBQ-8fCec7pr2rQw6n9g8">
                            <input type="password" class="form-control" id="api_key_input" name="api_key_display">
                        </div>
                    </div>
                    
                    <!-- OAuth Authentication -->
                    <div id="oauth_auth" style="display: none;">
                        <div class="form-group row">
                            <div class="col-sm-6 mb-3">
                                <label for="oauth_client_id">Client ID</label>
                                <input type="text" class="form-control" id="oauth_client_id" name="oauth_client_id">
                            </div>
                            <div class="col-sm-6 mb-3">
                                <label for="oauth_client_secret">Client Secret</label>
                                <input type="password" class="form-control" id="oauth_client_secret" name="oauth_client_secret">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="oauth_token_url">Token URL</label>
                            <input type="url" class="form-control" id="oauth_token_url" name="oauth_token_url">
                        </div>
                    </div>
                    
                    <!-- HMAC Authentication -->
                    <div id="hmac_auth" style="display: none;">
                        <div class="form-group">
                            <label for="hmac_secret">HMAC Secret</label>
                            <input type="password" class="form-control" id="hmac_secret" name="hmac_secret">
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <div class="custom-control custom-switch">
                            <input type="checkbox" class="custom-control-input" id="is_active" name="is_active" checked>
                            <label class="custom-control-label" for="is_active">Active</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Server</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Server Modal -->
<div class="modal fade" id="editServerModal" tabindex="-1" role="dialog" aria-labelledby="editServerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editServerModalLabel">Edit Server</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="editServerForm" action="/servers/edit" method="post">
                <input type="hidden" id="edit_server_id" name="server_id">
                <div class="modal-body">
                    <!-- Форма редактирования, аналогичная форме добавления -->
                    <!-- Поля предзаполняются через JavaScript при открытии модального окна -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Server Modal -->
<div class="modal fade" id="deleteServerModal" tabindex="-1" role="dialog" aria-labelledby="deleteServerModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteServerModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete server <span id="delete_server_name"></span>?</p>
                <p class="text-danger">This action cannot be undone. All peers on this server will be lost.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <form id="deleteServerForm" action="/servers/delete" method="post">
                    <input type="hidden" id="delete_server_id" name="server_id">
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block scripts %}
<script>
// Функция для генерации случайного API ключа
function generateApiKey(length = 32) {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    const charactersLength = characters.length;
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}

// Функция для обработки открытия модального окна добавления сервера
function initAddServerModal() {
    // Ищем модальное окно по селектору
    const addServerModal = document.getElementById('addServerModal');
    
    // Если модальное окно найдено
    if (addServerModal) {
        // Добавляем обработчик события показа модального окна
        addServerModal.addEventListener('show.bs.modal', function() {
            console.log('Modal show event triggered');
            
            // Генерируем API ключ
            const apiKey = generateApiKey();
            
            // Находим поле для API ключа
            const apiKeyInput = document.querySelector('input[name="api_key"]');
            const apiKeyDisplay = document.getElementById('api_key_display');
            
            if (apiKeyInput) {
                // Устанавливаем значение ключа в поле input
                apiKeyInput.value = apiKey;
                
                // Если есть элемент для отображения ключа, показываем его там
                if (apiKeyDisplay) {
                    apiKeyDisplay.textContent = apiKey;
                }
                
                // Обновляем видимое поле, если оно существует
                const visibleKeyField = document.querySelector('.api-key-display');
                if (visibleKeyField) {
                    visibleKeyField.textContent = apiKey;
                }
            }
        });
    } else {
        console.error('Cannot find add server modal');
    }
}

// Вызываем инициализацию при загрузке страницы
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM fully loaded');
    initAddServerModal();
    
    // Также можно добавить обработчик события отправки формы,
    // чтобы проверить, что API ключ установлен перед отправкой
    const addServerForm = document.getElementById('addServerForm');
    if (addServerForm) {
        addServerForm.addEventListener('submit', function(event) {
            const apiKeyInput = document.querySelector('input[name="api_key"]');
            if (!apiKeyInput || !apiKeyInput.value) {
                // Если API ключ не установлен, генерируем его
                apiKeyInput.value = generateApiKey();
            }
        });
    }
});
function copyApiKey() {
    const apiKeyDisplay = document.getElementById('api_key_display');
    if (apiKeyDisplay) {
        navigator.clipboard.writeText(apiKeyDisplay.value)
            .then(() => {
                // Показать уведомление о успешном копировании
                alert('API ключ скопирован в буфер обмена');
            })
            .catch(err => {
                console.error('Не удалось скопировать: ', err);
            });
    }
}
// Восстановление функциональности
function copyAPIKey() {
    const keyDisplay = document.getElementById('api_key_display');
    keyDisplay.select();
    document.execCommand('copy');
    alert('API ключ скопирован в буфер обмена');
}

// Обновление отображаемого ключа при его генерации
function updateAPIKeyDisplay() {
    document.getElementById('api_key_display').value = document.getElementById('api_key').value;
}
(function() {
    // 1. Восстановление списка геолокаций
    fetch('/api/geolocations')
        .then(r => r.json())
        .then(data => {
            console.log('Данные геолокаций:', data);
            if (data.status === 'success') {
                // Находим или создаем селектор геолокаций
                let geoSelect = document.getElementById('geolocation_id');
                if (!geoSelect) {
                    console.log('Создаем новый элемент select для геолокаций');
                    const geoFormGroup = document.querySelector('.form-group, .mb-3').cloneNode(true);
                    const label = geoFormGroup.querySelector('label');
                    label.textContent = 'Геолокация';
                    label.setAttribute('for', 'geolocation_id');
                    
                    geoSelect = document.createElement('select');
                    geoSelect.className = 'form-control form-select';
                    geoSelect.id = 'geolocation_id';
                    geoSelect.name = 'geolocation_id';
                    geoSelect.required = true;
                    
                    const oldInput = geoFormGroup.querySelector('input, select');
                    oldInput.parentNode.replaceChild(geoSelect, oldInput);
                    
                    // Добавляем новый элемент перед кнопкой "Добавить сервер"
                    const footer = document.querySelector('.modal-footer');
                    footer.parentNode.insertBefore(geoFormGroup, footer);
                }
                
                // Добавляем опции
                geoSelect.innerHTML = '<option value="">Выберите геолокацию</option>';
                data.geolocations.forEach(geo => {
                    const option = document.createElement('option');
                    option.value = geo.id;
                    option.textContent = geo.name;
                    geoSelect.appendChild(option);
                });
                console.log('Геолокации восстановлены:', data.geolocations.length);
            }
        });
    
    // 2. Восстановление API ключа
    // Генерируем случайный ключ
    const apiKey = 'key_' + Math.random().toString(36).substring(2, 15);
    
    // Находим поле API ключа или создаем новое
    let apiKeyField = document.getElementById('api_key');
    if (!apiKeyField) {
        console.log('Создаем новое поле для API ключа');
        const apiFormGroup = document.querySelector('.form-group, .mb-3').cloneNode(true);
        const label = apiFormGroup.querySelector('label');
        label.textContent = 'API Ключ';
        label.setAttribute('for', 'api_key');
        
        apiKeyField = document.createElement('input');
        apiKeyField.type = 'text';
        apiKeyField.className = 'form-control';
        apiKeyField.id = 'api_key';
        apiKeyField.name = 'api_key';
        apiKeyField.value = apiKey;
        apiKeyField.readOnly = true;
        
        const oldInput = apiFormGroup.querySelector('input, select');
        oldInput.parentNode.replaceChild(apiKeyField, oldInput);
        
        // Добавляем новый элемент перед кнопкой "Добавить сервер"
        const footer = document.querySelector('.modal-footer');
        footer.parentNode.insertBefore(apiFormGroup, footer);
    } else {
        apiKeyField.value = apiKey;
    }
    console.log('API ключ восстановлен:', apiKey);
    
    // 3. Настройка отправки формы
    const addButton = document.getElementById('addServerBtn') || 
                      document.querySelector('.modal-footer button.btn-primary');
    
    if (addButton) {
        console.log('Настраиваем кнопку отправки формы');
        addButton.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Собираем данные формы
            const endpoint = document.getElementById('endpoint')?.value;
            const port = document.getElementById('port')?.value;
            const address = document.getElementById('address')?.value;
            const publicKey = document.getElementById('public_key')?.value;
            const geoId = document.getElementById('geolocation_id')?.value;
            
            // Проверяем заполненность обязательных полей
            if (!endpoint || !port || !address || !publicKey || !geoId) {
                alert('Пожалуйста, заполните все обязательные поля');
                return;
            }
            
            // Формируем данные для отправки
            const formData = {
                endpoint: endpoint,
                port: parseInt(port),
                address: address,
                public_key: publicKey,
                geolocation_id: parseInt(geoId),
                api_key: apiKey,
                api_url: `http://${endpoint}/`,
                max_peers: parseInt(document.getElementById('max_peers')?.value || '100'),
                active: document.getElementById('active')?.checked !== false
            };
            
            console.log('Отправляем данные:', formData);
            
            // Отправляем запрос
            fetch('/api/servers', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(formData)
            })
            .then(response => {
                console.log('Статус ответа:', response.status);
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`Ошибка сервера: ${response.status} ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Ответ сервера:', data);
                alert(data.status === 'success' ? 
                      'Сервер успешно добавлен!' : 
                      `Ошибка: ${data.message || 'Неизвестная ошибка'}`);
                
                if (data.status === 'success') {
                    // Закрываем модальное окно
                    try {
                        const modalEl = document.getElementById('addServerModal');
                        const modal = bootstrap.Modal.getInstance(modalEl);
                        if (modal) modal.hide();
                    } catch (e) {
                        console.error('Ошибка при закрытии модального окна:', e);
                    }
                    
                    // Перезагружаем страницу
                    setTimeout(() => location.reload(), 1000);
                }
            })
            .catch(error => {
                console.error('Ошибка отправки:', error);
                alert('Ошибка при отправке: ' + error.message);
            });
        });
    }
})();
// Добавьте этот скрипт в конец файла servers.html или включите его в блок scripts
document.addEventListener('DOMContentLoaded', function() {
    const addServerForm = document.getElementById('addServerForm');
    if (addServerForm) {
        addServerForm.addEventListener('submit', function(event) {
            event.preventDefault(); // Предотвращаем стандартную отправку формы
            
            // Собираем данные формы
            const formData = {
                name: document.getElementById('name')?.value,
                location: document.getElementById('location')?.value,
                endpoint: document.getElementById('endpoint')?.value,
                port: parseInt(document.getElementById('port')?.value),
                geolocation_id: parseInt(document.getElementById('geolocation_id')?.value),
                public_key: document.getElementById('public_key')?.value,
                address: document.getElementById('address')?.value,
                api_key: document.getElementById('api_key')?.value,
                max_peers: parseInt(document.getElementById('max_peers')?.value || "100"),
                is_active: document.getElementById('is_active')?.checked
            };
            
            // Если API ключ не установлен, используем автоматически сгенерированный
            if (!formData.api_key) {
                formData.api_key = generateApiKey();
                
                // Обновляем значение в скрытом поле
                if (document.getElementById('api_key')) {
                    document.getElementById('api_key').value = formData.api_key;
                }
                
                // Обновляем отображаемое значение
                if (document.getElementById('api_key_display')) {
                    document.getElementById('api_key_display').value = formData.api_key;
                }
            }
            
            // Отправляем данные на сервер через fetch API
            fetch('/api/servers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    // Закрываем модальное окно
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addServerModal'));
                    if (modal) modal.hide();
                    
                    // Показываем сообщение об успехе
                    showAlert('Сервер успешно добавлен', 'success');
                    
                    // Обновляем список серверов
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    // Показываем сообщение об ошибке
                    showAlert(`Ошибка: ${data.message}`, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Ошибка соединения с сервером', 'danger');
            });
        });
    }
    
    // Функция для отображения сообщений
    function showAlert(message, type) {
        const alertsContainer = document.querySelector('.flash-messages');
        if (!alertsContainer) {
            console.error('Alerts container not found');
            return;
        }
        
        const alertHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        
        alertsContainer.innerHTML += alertHTML;
        
        // Автоматически скрываем уведомление через 5 секунд
        setTimeout(() => {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
    }
});
</script>
{% endblock %}