services:
  # PostgreSQL база данных
  db:
    image: postgres:13
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=wireguard
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - vpn_network

  # Сервис базы данных
  database-service:
    build: ./database-service
    restart: always
    volumes:
      - ./database-service:/app
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=wireguard
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5002:5002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: >
      bash -c "chmod +x setup_database.sh &&
              ./setup_database.sh &&
              python db_manager.py"
    networks:
      - vpn_network

  # Прокси-сервер для WireGuard
  wireguard-proxy:
    build: ./wireguard-proxy
    restart: always
    volumes:
      - ./wireguard-proxy:/app
      - ./config:/app/config
    environment:
      - DATABASE_SERVICE_URL=http://database-service:5002
      - DEBUG=False
      - LOG_LEVEL=INFO
      - CACHE_TTL=300
      - HTTP_TIMEOUT=10
      - HTTP_MAX_RETRIES=3
    depends_on:
      database-service:
        condition: service_healthy
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - vpn_network

  # Административная панель
  admin-panel:
    build: ./admin-panel
    restart: always
    volumes:
      - ./admin-panel:/app
    environment:
      - DATABASE_SERVICE_URL=http://database-service:5002
      - WIREGUARD_PROXY_URL=http://wireguard-proxy:5001
    depends_on:
      database-service:
        condition: service_healthy
      wireguard-proxy:
        condition: service_healthy
    ports:
      - "5003:5000"
    networks:
      - vpn_network

  # Telegram бот
  telegram-service:
    build: ./telegram-service
    restart: always
    volumes:
      - ./telegram-service:/app
    environment:
      - DATABASE_SERVICE_URL=http://database-service:5002
      - WIREGUARD_PROXY_URL=http://wireguard-proxy:5001
      - TELEGRAM_API_TOKEN=${TELEGRAM_API_TOKEN}
      - PAYMENT_TOKEN=${PAYMENT_TOKEN}
    depends_on:
      database-service:
        condition: service_healthy
      wireguard-proxy:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - vpn_network

  # Сервис сбора метрик
  metrics-collector:
    build: ./metrics-collector
    restart: always
    volumes:
      - ./metrics-collector:/app
    environment:
      - DATABASE_SERVICE_URL=http://database-service:5002
      - WIREGUARD_PROXY_URL=http://wireguard-proxy:5001
      - COLLECTION_INTERVAL=120
    depends_on:
      database-service:
        condition: service_healthy
      wireguard-proxy:
        condition: service_healthy
    networks:
      - vpn_network

  # Сервис миграции пользователей
  migration-service:
    build: ./migration-service
    restart: on-failure
    volumes:
      - ./migration-service:/app
    environment:
      - DATABASE_SERVICE_URL=http://database-service:5002
      - WIREGUARD_PROXY_URL=http://wireguard-proxy:5001
      - STARTUP_DELAY=60
    depends_on:
      database-service:
        condition: service_healthy
      wireguard-proxy:
        condition: service_healthy
    networks:
      - vpn_network

networks:
  vpn_network:
    driver: bridge

volumes:
  postgres_data: